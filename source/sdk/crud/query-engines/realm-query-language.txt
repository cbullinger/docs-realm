.. _realm-query-language:
.. _rql:

==========================
Realm Query Language (RQL)
==========================

.. meta::
  :description: Use Realm Query Language (RQL) to retrieve objects from the database.
  :keywords: Realm, Flutter SDK, Kotlin SDK, Java SDK, Node.js SDK, code example, filter, search

.. facet::
  :name: genre
  :values: reference

.. facet::
  :name: programming_language
  :values: cpp, csharp, dart, java, javascript/typescript, kotlin

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

.. tabs-selector:: drivers

Realm Query Language (RQL) is a string-based query language to constrain
searches when retrieving objects from a realm. SDK-specific methods pass queries
to the Realm query engine, which retrieves matching objects from the realm.
Realm Query Language syntax is based on `NSPredicate
<https://developer.apple.com/documentation/foundation/nspredicate>`__.

Queries evaluate a predicate for every object in the collection being queried.
If the predicate resolves to ``true``, the results collection includes the object.

You can use Realm Query Language in most Realm SDKs with your SDK's filter
or query methods. The Swift SDK is the exception, as it uses the
:ref:`NSPredicate query API <ios-nspredicate-query>`.
Some SDKs also support idiomatic APIs for querying realms in their language.

Query with Realm SDKs
---------------------

For language and SDK-specific methods for querying data, refer to the related
documentation:

- :ref:`sdks-crud-read`
- :ref:`Fluent Interface (Java SDK) <java-filter-data>`
- :ref:`LINQ (.NET SDK) <dotnet-linq>`
- :ref:`Type-Safe and NSPredicate Queries (Swift SDK) <sdks-filter-data-swift>`

.. note:: Swift SDK does not support Realm Query Language

   The Swift SDK does not support querying with Realm Query Language.
   You can instead use NSPredicate to query Realm. For examples of querying
   Realm in the Swift SDK, refer to :ref:`Filter Data - Swift SDK <ios-client-query-engine>`.

You can also use Realm Query Language to browse for data in
:ref:`Realm Studio <realm-studio>`. Realm Studio is a visual tool
to view, edit, and design Realm files.

Examples on This Page
---------------------

Many of the examples in this page use a simple data set for a to-do list app.
The two Realm object types are ``Project`` and ``Item``.

- An ``Item`` has a name, assignee's name, and completed flag.
  There is also an arbitrary number for priority (higher is more important)
  and a count of minutes spent working on it.
- A ``Project`` has zero or more ``Items`` and an optional quota
  for minimum number of to-do items expected to be completed.

See the schema for these two classes, ``Project`` and ``Item``, below:

.. include:: /includes/sdk-examples/crud/query/rql/rql-example-data-model.rst


Query Syntax
------------



Dot Notation
~~~~~~~~~~~~

You can use **dot notation** to refer to child properties of an object, including the properties of embedded objects and relationships:

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.dot-notation.ts.rst

You can also chain dot notations for nested properties.
For example, each Project has a ``projectLocation`` property that
refers to an Office object, which itself contains an embedded object
property ``address``. You can chain dot notations to query the deeply nested
``zipcode`` property of an embedded address:

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.deep-dot-notation.ts.rst


.. TODO: add as part of collections-in-mixed epic
Bracket Notation
~~~~~~~~~~~~~~~~
.. _rql-parameterized-queries:

Parameterized vs. Serialized Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can format queries in two ways:

- **Serialized queries** pass values directly in the expression.

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.serialized-query.ts.rst

- **Parameterized queries** pass interpolated variables as additional
  arguments. The syntax for interpolated variables is
  ``$<int>``, starting at ``0`` and incrementing for each additional variable.

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.predicate.ts.rst

Supported Types
~~~~~~~~~~~~~~~

.. _rql-nil-type:

Nil Type
````````

Realm Query Language includes the ``nil`` type to represent a null pointer.
You can either reference ``nil`` directly in your queries or with a parameterized query.
If you're using a parameterized query, each SDK maps its respective null pointer
to ``nil``.

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.nil-type.ts.rst

.. _rql-operators:

Operators
---------

.. _rql-comparison-operators:

Comparison Operators
~~~~~~~~~~~~~~~~~~~~

Use comparison operators to compare values of matching data types.

.. TODO: link or mention how ANY works (noted as equivalent to IN in this table)

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - ``BETWEEN {N1, N2}``
     - Evaluates to ``true`` if the left-hand numerical or date expression
       is between or equal to the right-hand range. For dates, this evaluates
       to ``true`` if the left-hand date is within the right-hand date range.

   * - | ``==``, ``=``
     - Evaluates to ``true`` if the left-hand expression is equal
       to the right-hand expression.

   * - | ``>``
     - Evaluates to ``true`` if the left-hand numerical or date expression
       is greater than the right-hand numerical or date expression.
       For dates, this evaluates to ``true`` if the left-hand date is later
       than the right-hand date.

   * - | ``>=``
     - Evaluates to ``true`` if the left-hand numerical or date expression
       is greater than or equal to the right-hand numerical or date expression.
       For dates, this evaluates to ``true`` if the left-hand date is later than
       or the same as the right-hand date.

   * - | ``IN``
     - Evaluates to ``true`` if the left-hand expression is in the
       right-hand list. This is equivalent to and used as a shorthand
       for ``== ANY``.

   * - | ``<``
     - Evaluates to ``true`` if the left-hand numerical or date expression
       is less than the right-hand numerical or date expression.
       For dates, this evaluates to ``true`` if the left-hand date is earlier
       than the right-hand date.

   * - | ``<=``
     - Evaluates to ``true`` if the left-hand numeric expression is less than
       or equal to the right-hand numeric expression. For dates, this evaluates
       to ``true`` if the left-hand date is earlier than or the same
       as the right-hand date.

   * - | ``!=``, ``<>``
     - Evaluates to ``true`` if the left-hand expression is not equal
       to the right-hand expression.


The following example uses comparison operators to find to-do items whose
property values match certain criteria:

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.comparison-operators.ts.rst

.. important:: Types Must Match

   The type on both sides of the operator must be equivalent. For
   example, comparing an ObjectId with string will result in a precondition
   failure with a message like:

   .. code-block::
      :copyable: false

      "Expected object of type object id for property 'id' on object of type
      'User', but received: 11223344556677889900aabb (Invalid value)"

   You can compare any numeric type with any other numeric type,
   including decimal, float, and Decimal128.


.. _rql-logical-operators:

Logical Operators
~~~~~~~~~~~~~~~~~

Make compound predicates using logical operators.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - | ``AND``
       | ``&&``
     - Evaluates to ``true`` if both left-hand and right-hand expressions are ``true``.

   * - | ``NOT``
       | ``!``
     - Negates the result of the given expression.

   * - | ``OR``
       | ``||``
     - Evaluates to ``true`` if either expression returns ``true``.

The following example uses logical operators to combine multiple predicates:

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.logical-operators.ts.rst

.. _rql-arithmetic-operators:

Arithmetic Operators
~~~~~~~~~~~~~~~~~~~~

Use arithmetic operators to perform basic arithmetic in an expression when
evaluating numeric data types, including object properties.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - | ``*``
     - Multiplication.
   * - | ``/``
     - Division.
   * - | ``+``
     - Addition.
   * - | ``-``
     - Subtraction.
   * - | ``()``
     - Group expressions together.

The following example uses arithmetic operators on Item object properties containing numeric values:

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.basic-arithmetic.ts.rst

.. _rql-aggregate-operators:

Aggregate Operators
~~~~~~~~~~~~~~~~~~~

Aggregate operators traverse a collection and reduce it to a single value.
You can use aggregate operators on collection properties, such as a list, or on

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - | ``@avg``
     - Evaluates to the average value of a given numerical property across
       a collection. If any values are ``null``, they are not counted
       in the result.

   * - | ``@count``
     - Evaluates to the number of objects in the given collection.

   * - | ``@max``
     - Evaluates to the highest value of a given numerical property
       across a collection. ``null`` values are ignored.

   * - | ``@min``
     - Evaluates to the lowest value of a given numerical property
       across a collection. ``null`` values are ignored.

   * - | ``@sum``
     - Evaluates to the sum of a given numerical property across a collection,
       excluding ``null`` values.


The following example uses aggregate operators to find project whose ``items``
collection property meets certain criteria:

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.aggregate-operators.ts.rst

.. _rql-sort-distinct-limit:

Sort and Limit Operators
~~~~~~~~~~~~~~~~~~~~~~~~

Use sort and limit operators to shape your query results collection. You can
combine these operators across multiple properties.

       For example, if you ``SORT (priority DESC, name DESC)``, the query
       returns sorted by priority, and then by name when priority
       value is the same.




Sort and limit the results collection of your query using additional operators.

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Operator
     - Description

   * - ``SORT`` (``ASC`` or ``DESC``)
     - Specify the name of the property to compare, and whether to sort by
       ascending (``ASC``) or descending (``DESC``) order. If you specify
       multiple SORT fields, you must specify sort order for each field.
       With multiple sort fields, the query sorts by the first field, and
       then the second.

   * - ``DISTINCT``
     - Specify a name of the property to compare. Remove duplicates
       for that property in the results collection. If you specify multiple
       DISTINCT fields, the query removes duplicates by the first field, and
       then the second. For example, if you ``DISTINCT (name, assignee)``,
       the query only removes duplicates where the values of both properties
       are the same.

   * - ``LIMIT``
     - Limit the results collection to the specified number.

.. example::

   Use the query engine's sort, distinct, and limit operators to find to-do items
   where the assignee is Ali:

   - Sorted by priority in descending order
   - Enforcing uniqueness by name
   - Limiting the results to 5 items

   .. literalinclude:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.sort-distinct-limit.js
      :language: javascript

.. important:: Order Matters

    Queries are executed in order. This includes the order of the operators in
    the query *and* the order of properties within an operator, if applicable.
    This can greatly impact the results returned. For example, sorting a query before
    limiting it can return very different results than sorting *after* limiting
    it.

    .. .. include:: /includes/file.rst
       :start-after: text to start after (Optional}
       :end-before: text to end before (Optional}

    For example,

    - ``LIMIT(5) SORT(priority DESC)`` returns
    the top 5 items in the entire collection, which are then sorted by priority. However, ``SORT(priority DESC) LIMIT(5)``


Data Type Queries
-----------------




