.. _realm-query-language:
.. _rql:

==========================
Realm Query Language (RQL)
==========================

.. meta::
  :description: Use Realm Query Language (RQL) to retrieve objects from the database.
  :keywords: Realm, Flutter SDK, Kotlin SDK, Java SDK, Node.js SDK, code example, filter, search

.. facet::
  :name: genre
  :values: reference

.. facet::
  :name: programming_language
  :values: cpp, csharp, dart, java, javascript/typescript, kotlin

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

.. tabs-selector:: drivers

Realm Query Language (RQL) is a string-based query language to constrain
searches when retrieving objects from a realm. SDK-specific methods pass queries
to the Realm query engine, which retrieves matching objects from the realm.
Realm Query Language syntax is based on `NSPredicate
<https://developer.apple.com/documentation/foundation/nspredicate>`__.

Queries evaluate a predicate for every object in the collection being queried.
If the predicate resolves to ``true``, the results collection includes the object.

You can use Realm Query Language in most Realm SDKs with your SDK's filter
or query methods. The Swift SDK is the exception, as it uses the
:ref:`NSPredicate query API <ios-nspredicate-query>`.
Some SDKs also support idiomatic APIs for querying realms in their language.

Query with Realm SDKs
---------------------

For language and SDK-specific methods for querying data, refer to the related
documentation:

- :ref:`sdks-crud-read`
- :ref:`Fluent Interface (Java SDK) <java-filter-data>`
- :ref:`LINQ (.NET SDK) <dotnet-linq>`
- :ref:`Type-Safe and NSPredicate Queries (Swift SDK) <sdks-filter-data-swift>`

.. note:: Swift SDK does not support Realm Query Language

   The Swift SDK does not support querying with Realm Query Language.
   You can instead use NSPredicate to query Realm. For examples of querying
   Realm in the Swift SDK, refer to :ref:`Filter Data - Swift SDK <ios-client-query-engine>`.

You can also use Realm Query Language to browse for data in
:ref:`Realm Studio <realm-studio>`. Realm Studio is a visual tool
to view, edit, and design Realm files.

Examples on This Page
---------------------

Many of the examples in this page use a simple data set for a to-do list app.
The two Realm object types are ``Project`` and ``Item``.

- An ``Item`` has a name, assignee's name, and completed flag.
  There is also an arbitrary number for priority (higher is more important)
  and a count of minutes spent working on it.
- A ``Project`` has zero or more ``Items`` and an optional quota
  for minimum number of to-do items expected to be completed.

See the schema for these two classes, ``Project`` and ``Item``, below:

.. include:: /includes/sdk-examples/crud/query/rql/rql-example-data-model.rst


Query Syntax
------------

Expressions and Predicates
~~~~~~~~~~~~~~~~~~~~~~~~~~

Realm Query Language uses expressions and predicates to evaluate queries.

- **Expressions** are the building blocks of queries. They can be simple or complex.
  For example, ``name == 'Ali'`` is a simple expression, while
  ``name == 'Ali' AND priority > 5`` is a complex expression.
- **Predicates** are expressions that evaluate to ``true`` or ``false``.
  For example, ``name == 'Ali'`` is a predicate that evaluates to ``true``
  if the name property is 'Ali'.

TRUEPREDICATE and FALSEPREDICATE

Case Sensitivity
~~~~~~~~~~~~~~~~

Unless otherwise noted, RQL operators and keywords are case insensitive.

``[c]`` denotes case sensitivity in the following examples.

Dot & Bracket Notation
~~~~~~~~~~~~~~~~~~~~~~

.. TODO: confirm how we want to communicate which SDK versions support bracket notation

You can use **dot notation** or **bracket notation** to refer to child
properties of an object, including the properties of embedded objects and
relationships:

.. TODO: add bracket notation to example

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.dot-notation.ts.rst

You can also chain these notations for nested properties.
For example, each Project has a ``projectLocation`` property that
refers to an Office object, which itself contains an embedded object
property ``address``. You can chain dot notations to query the deeply nested
``zipcode`` property of an embedded address:

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.deep-dot-notation.ts.rst



.. _rql-parameterized-queries:

Parameterized vs. Serialized Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can format queries in two ways:

- **Serialized queries** pass values directly in the expression.

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.serialized-query.ts.rst

- **Parameterized queries** pass interpolated variables as additional
  arguments. The syntax for interpolated variables is
  ``$<int>``, starting at ``0`` and incrementing for each additional variable.

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.predicate.ts.rst

Supported Types
~~~~~~~~~~~~~~~

.. _rql-nil-type:

Nil Type
````````

Realm Query Language includes the ``nil`` type to represent a null pointer.
You can either reference ``nil`` directly in your queries or with a parameterized query.
If you're using a parameterized query, each SDK maps its respective null pointer
to ``nil``.

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.nil-type.ts.rst

.. _rql-operators:

Operators
---------

.. _rql-comparison-operators:

Comparison Operators
~~~~~~~~~~~~~~~~~~~~

Use comparison operators to compare values of matching data types.

.. TODO: link or mention how ANY works (noted as equivalent to IN in this table)

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - ``BETWEEN {N1, N2}``
     - Evaluates to ``true`` if the left-hand numerical or date expression
       is between or equal to the right-hand range. For dates, this evaluates
       to ``true`` if the left-hand date is within the right-hand date range.

   * - | ``==``, ``=``
     - Evaluates to ``true`` if the left-hand expression is equal
       to the right-hand expression.

   * - | ``>``
     - Evaluates to ``true`` if the left-hand numerical or date expression
       is greater than the right-hand numerical or date expression.
       For dates, this evaluates to ``true`` if the left-hand date is later
       than the right-hand date.

   * - | ``>=``
     - Evaluates to ``true`` if the left-hand numerical or date expression
       is greater than or equal to the right-hand numerical or date expression.
       For dates, this evaluates to ``true`` if the left-hand date is later than
       or the same as the right-hand date.

   * - | ``IN``
     - Evaluates to ``true`` if the left-hand expression is in the
       right-hand list. This is equivalent to and used as a shorthand
       for ``== ANY``.

   * - | ``<``
     - Evaluates to ``true`` if the left-hand numerical or date expression
       is less than the right-hand numerical or date expression.
       For dates, this evaluates to ``true`` if the left-hand date is earlier
       than the right-hand date.

   * - | ``<=``
     - Evaluates to ``true`` if the left-hand numeric expression is less than
       or equal to the right-hand numeric expression. For dates, this evaluates
       to ``true`` if the left-hand date is earlier than or the same
       as the right-hand date.

   * - | ``!=``, ``<>``
     - Evaluates to ``true`` if the left-hand expression is not equal
       to the right-hand expression.


The following example uses comparison operators to find to-do items whose
property values match certain criteria:

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.comparison-operators.ts.rst

.. important:: Types Must Match

   The type on both sides of the operator must be equivalent. For
   example, comparing an ObjectId with string will result in a precondition
   failure with a message like:

   .. code-block::
      :copyable: false

      "Expected object of type object id for property 'id' on object of type
      'User', but received: 11223344556677889900aabb (Invalid value)"

   You can compare any numeric type with any other numeric type,
   including decimal, float, and Decimal128.


.. _rql-string-operators:

String Operators
~~~~~~~~~~~~~~~~

Compare string values using these string operators.
Regex-like wildcards allow more flexibility in search.

.. note::

   You can use the following modifiers with the string operators:

   - ``[c]`` for case insensitivity.

     .. code-block:: javascript

        "name CONTAINS[c] $0", 'a'

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - | ``BEGINSWITH``
     - Evaluates to ``true`` if the left-hand string expression begins with
       the right-hand string expression. This is similar to ``contains``,
       but only matches if the right-hand string expression is found
       at the beginning of the left-hand string expression.

   * - | ``CONTAINS``
     - Evaluates to ``true`` if the right-hand string expression
       is found anywhere in the left-hand string expression.

   * - | ``ENDSWITH``
     - Evaluates to ``true`` if the left-hand string expression ends
       with the right-hand string expression. This is similar to ``contains``,
       but only matches if the left-hand string expression is found
       at the very end of the right-hand string expression.

   * - | ``LIKE``
     - Evaluates to ``true`` if the left-hand string expression
       matches the right-hand string wildcard string
       expression. A wildcard string expression is a string
       that uses normal characters with two special wildcard
       characters:

       - The ``*`` wildcard matches zero or more of any character
       - The ``?`` wildcard matches any character.

       For example, the wildcard string "d?g" matches "dog",
       "dig", and "dug", but not "ding", "dg", or "a dog".

   * - | ``==``, ``=``
     - Evaluates to ``true`` if the left-hand string is lexicographically equal
       to the right-hand string.

   * - | ``!=``, ``<>``
     - Evaluates to ``true`` if the left-hand string is not lexicographically
       equal to the right-hand string.

.. example::

   We use the query engine's string operators to find:

   - Projects with a name starting with the letter 'e'
   - Projects with names that contain 'ie'

   .. literalinclude:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.string-operators.js
      :language: javascript

.. _rql-logical-operators:

Logical Operators
~~~~~~~~~~~~~~~~~

Make compound predicates using logical operators.

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Operator
     - Description

   * - | ``AND``
       | ``&&``
     - Evaluates to ``true`` if both left-hand and right-hand expressions are ``true``.

   * - | ``NOT``
       | ``!``
     - Negates the result of the given expression.

   * - | ``OR``
       | ``||``
     - Evaluates to ``true`` if either expression returns ``true``.

The following example uses logical operators to combine multiple predicates:

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.logical-operators.ts.rst

.. _rql-arithmetic-operators:

Arithmetic Operators
~~~~~~~~~~~~~~~~~~~~

Use arithmetic operators to perform basic arithmetic in an expression when
evaluating numeric data types, including object properties.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - | ``*``
     - Multiplication.
   * - | ``/``
     - Division.
   * - | ``+``
     - Addition.
   * - | ``-``
     - Subtraction.
   * - | ``()``
     - Group expressions together.

The following example uses arithmetic operators on Item object properties containing numeric values:

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.basic-arithmetic.ts.rst

.. _rql-aggregate-operators:

Aggregate Operators
~~~~~~~~~~~~~~~~~~~
.. TODO: link to collection query section

Aggregate operators traverse a collection and reduce it to a single value.
You can use aggregate operators on collection properties, such as a list, or on

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - | ``@avg``
     - Evaluates to the average value of a given numerical property across
       a collection. If any values are ``null``, they are not counted
       in the result.

   * - | ``@count``
     - Evaluates to the number of objects in the given collection.

   * - | ``@max``
     - Evaluates to the highest value of a given numerical property
       across a collection. ``null`` values are ignored.

   * - | ``@min``
     - Evaluates to the lowest value of a given numerical property
       across a collection. ``null`` values are ignored.

   * - | ``@sum``
     - Evaluates to the sum of a given numerical property across a collection,
       excluding ``null`` values.


The following example uses aggregate operators to find projects whose ``items``
collection property meets certain criteria:

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.aggregate-operators.ts.rst

.. _rql-sort-distinct-limit:

Sort, Distinct, and Limit Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use sort, distinct, and limit operators to shape your query results collection. You can
combine these operators in a single query across multiple properties. Operators
are applied in the order they appear in the query.

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Operator
     - Description

   * - ``SORT`` (``ASC`` or ``DESC``)
     - Sort the results collection by the specified property or properties, either in ascending (``ASC``) or descending
       (``DESC``) order. Separate multiple properties by comma and define the
       sort order for each property. The SDK applies each sort operation one at a time, in order.

   * - ``DISTINCT``
     - Remove duplicates of the specified property or properties from the
       results collection. Separate multiple properties by comma. The SDK
       applies all distinct operations as a single AND condition,
       where duplicates must match all specified properties.

   * - ``LIMIT``
     - Limit the results collection to the specified number.

The following example finds all incomplete items, then
shapes the returned results using sort, distinct, and limit operators:

.. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.sort-distinct-limit.ts.rst

.. important:: Order Matters

    The SDK executes queries in order. This includes the order of any ``SORT``, ``DISTINCT``, and ``LIMIT``  operators in
    the query *and* the order of any properties within those operators.
    This can greatly impact the results returned. For example, sorting a query
    before limiting it can return very different results than sorting *after*
    limiting it.

    .. include:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.sort-distinct-limit-order-matters.ts.rst


Data Type Operators
-------------------

.. _rql-type-operator:

Type Operator
~~~~~~~~~~~~~

Check the data type of a mixed type or dictionary property using the
``@type`` operator. Evaluate the property against a string representation of the
data type name using string comparison operators.

For information on how each SDK language's data types map to database-specific data types, refer to :ref:`sdks-data-types`.

You can currently only use the type operator with mixed types and
dictionaries.

.. list-table::
   :header-rows: 1
   :widths: 40 60

   * - Operator
     - Description

   * - ``@type``
     - Check if type of a property is the specified data type represented as a string.
       Use ``==`` and ``!=`` to compare equality.

The following example uses the ``@type`` operator to find projects
whose mixed data type ``additionalInfo`` property type matches specific
criteria:

.. literalinclude:: /examples/generated/node/v12/formatted/realm-query-language.test.snippet.type-operator.js
   :language: js


Data Type Queries
-----------------




