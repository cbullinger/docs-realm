.. .. .. _kotlin-define-object-model:
.. .. _kotlin-model-data:

===================================================
Define a Realm Object Model (Combined) - Kotlin SDK
===================================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page describes how to define Realm objects as part of your application's 
data model. 

The Kotlin SDK memory maps Realm objects directly to native Kotlin 
objects, so there's no need to use a special data access library. 
You define your application's data model via regular Kotlin classes declared
in your application code object. 

To learn about how to make changes to your Realm objects after
defining your Realm object model, refer to 
:ref:`Change an Object Model <kotlin-change-object-model>`.

.. .. _kotlin-object-type:
.. .. _kotlin-object-schema:

Realm Objects
-------------

**Realm objects** are uniquely named Kotlin classes that you can work with 
as you would any other class instance. 

Each object class represents an **object type**. Objects of the same type share 
an **object schema**, which defines the properties and relationships for objects 
of that type. The SDK guarantees that all objects in a realm conform to the 
schema for their object type and validates objects whenever they are created, 
modified, or deleted.

However, note that Realm objects have the following constraints:

- Realm objects *must* inherit from the ``RealmObject`` class or its 
  subclasses: ``EmbeddedRealmObject`` or ``AsymmetricRealmObject``. 
  The Kotlin SDK does *not* support inheritance from custom base classes. 
- The Kotlin SDK requires that Realm objects have an empty constructor. 
  To learn about working around this limitation, refer to 
  :ref:`Single Primary Constructor <kotlin-single-primary-constructor>`.
- Class names are limited to a maximum of 57 UTF-8 characters. 

Additionally, the Kotlin SDK does *not* support using Kotlin
`data classes <https://kotlinlang.org/docs/data-classes.html>`__ to model 
data. This is because data classes are typically used for immutable data, 
which goes against how the Realm Kotlin SDK models data.

.. .. _kotlin-define-a-new-object-type:

Define a New Object Type
------------------------

To define a new Realm object type, you must create a uniquely named Kotlin 
class that implements either the ``RealmObject``, 
``EmbeddedRealmObject``, or ``AsymmetricRealmObject`` interface. 

.. include:: /includes/note-class-char-limit.rst

Then, you specify your object's properties, including:

- The :ref:`data type <kotlin-supported-types>` for each property. 
  The Kotlin SDK supports the following data types: 

  - `Kotlin primitive types <https://kotlinlang.org/docs/basic-types.html>`__
  - a limited subset of `BSON <https://bsonspec.org/>`__ types
  - Realm-specific types, which you can use for unique 
    identifiers, timestamps, counters, and collections

- Any :ref:`property annotations <kotlin-property-annotations>`, which add 
  functionality to properties in your Realm objects. You can use annotations to: 

  - Designate a property as a primary key
  - Mark a property as indexable
  - Ignore a property 
  - Map a property or class name to another name 

- Any relationships with other Realm objects. 

After you've defined your Realm object model, you can pass the set of object 
classes to the realm's configuration when you :ref:`open a realm 
<kotlin-open-a-realm>`, and then work with those objects in the realm.

.. .. _kotlin-single-primary-constructor:

.. important:: Realm Requires an Empty Constructor
   
   The Realm Kotlin SDK does *not* support having a single primary constructor.
   The SDK requires an empty constructor to create objects. As a workaround,
   you can do something similar to the following:

   .. code-block:: kotlin
      :copyable: false

      class Person(var name: String, var age: Int): RealmObject {
         constructor(): this("", 0) // Empty constructor required by Realm
      }

Define a Realm Object
~~~~~~~~~~~~~~~~~~~~~

To define a Realm object, create a Kotlin class that implements the `RealmObject 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__ 
interface:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-realm-object.kt
  :language: kotlin

You can then :ref:`use the object as a property <kotlin-realm-objects-as-properties>` 
to define relationships with other Realm objects. Refer to the 
:ref:`<kotlin-define-relationship-properties>` section for more information.

.. .. _kotlin-define-embedded-object:
.. .. _kotlin-embedded-objects:

Define an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~

An ``EmbeddedRealmObject`` is a special type of Realm object that models 
complex data about a specific object. Realm treats each embedded object as 
nested data inside of a single specific parent object.

Embedded objects are similar to relationships, but an embedded object 
inherits the lifecycle of its parent object and cannot exist as an 
independent Realm object. 
Because of this, embedded objects have the following constraints: 

- Embedded objects are deleted when their parent object is deleted 
  or their parent no longer references them. 
- Embedded objects *cannot* have a :ref:`primary key <kotlin-primary-keys>`. 
- You *cannot* reassign an embedded object to a different parent object.
- You *cannot* link to an embedded object from multiple parent objects. 
- Learn how to :ref:`Define an Embedded Object Property <kotlin-embedded-objects-as-properties>`.

.. tip:: Embedded Object Types are Reusable and Composable

   You can use the same embedded object type in multiple parent object types, and
   you can embed objects inside other embedded objects. You can even
   recursively reference an embedded object type as an optional property in its
   own definition.

To define an :ref:`embedded object <kotlin-embedded-objects>`, create a Kotlin 
class that implements the `EmbeddedRealmObject 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__
interface:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-embedded-object.kt 
    :language: kotlin

You must then :ref:`embed the object as a property <kotlin-embedded-objects-as-properties>` 
of another Realm object to define the relationship with the parent object:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.embed-defined-object.kt
    :language: kotlin

 Refer to the :ref:`<kotlin-define-relationship-properties>` section for more information.

.. .. _kotlin-asymmetric-objects:

Define an Asymmetric Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 1.10.0

An ``AsymmetricRealmObject`` is an insert-only object intended to be used with 
Atlas Device Sync feature Data Ingest. 

Asymmetric objects broadly support the same property types as ``RealmObject``, 
with a few exceptions:

- Asymmetric objects can only be used in synced realms configured with 
  Flexible Sync. However, you cannot create subscriptions to 
  asymmetric objects.
- An ``AsymmetricRealmObject`` can contain ``EmbeddedRealmObject`` 
  types, but *cannot* contain ``RealmObject`` types or other 
  ``AsymmetricRealmObject`` types
- ``AsymmetricRealmObject`` types *cannot* be used as properties

Additionally, asymmetric objects do not function in the same way as other Realm objects. 
You cannot add, read, update, or delete an asymmetric object from the realm.
You can only create an asymmetric object, which then syncs unidirectionally 
to the Atlas database linked to your App with Device Sync.
Realm then deletes this object after syncing. 

To define an :ref:`asymmetric object<kotlin-asymmetric-objects>`, create a 
Kotlin class that implements the `AsymmetricRealmObject 
<{+kotlin-sync-prefix+}io.realm.kotlin.types/-asymmetric-realm-object/index.html>`__
interface:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-asymmetric-model.kt 
    :language: kotlin

You *cannot* use an asymmetric object as a property in another Realm object.

Define Collection Properties
----------------------------

The Kotlin SDK offers several collection types that you can use as 
properties in your data model: ``RealmList``, ``RealmSet``, and 
``RealmDictionary``.

A collection is an object that contains zero or more instances of one supported 
data type. Realm collections are homogenous (all objects in a collection are 
of the same type) and are backed by their corresponding built-in Kotlin classes.
For more information on the collection types used in the Kotlin SDK, 
refer to :ref:`Collection Types <kotlin-collection-types>`.

.. important:: Initialize Collection Properties
   
   Collection types are non-null. When you define a collection property, 
   you *must* initialize it. 

Define a RealmList
~~~~~~~~~~~~~~~~~~

To define a property as a :ref:`RealmList <kotlin-realm-list>`, specify its
type within the object schema as ``RealmList<E>`` and initialize the
default value using `realmListOf()
<{+kotlin-local-prefix+}io.realm.kotlin.ext/realm-list-of.html>`__:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-a-realm-list.kt
   :language: kotlin

.. .. _kotlin-define-realm-set-type:

Define a RealmSet
~~~~~~~~~~~~~~~~~

To define a property as a :ref:`RealmSet <kotlin-realm-set>`, specify its
type within the object schema as ``RealmSet<E>`` and initialize the
default value using `realmSetOf() 
<{+kotlin-local-prefix+}io.realm.kotlin.ext/realm-set-of.html>`__:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-a-realm-set.kt
   :language: kotlin

.. .. _kotlin-define-realm-dictionary-type:

Define a RealmDictionary/RealmMap
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To define a :ref:`RealmDictionary <kotlin-realm-dictionary>`, specify its 
type within the object schema as a ``RealmDictionary<K, V>`` and initialize the
the default value using `realmDictionaryOf()
<{+kotlin-local-prefix+}io.realm.kotlin.ext/realm-dictionary-of.html>`__:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-realm-dictionary-property.kt
   :language: kotlin

.. include:: /includes/map-key-string-limitations.rst

.. literalinclude:: /examples/generated/kotlin/CreateTest.snippet.percent-encode-disallowed-characters.kt
   :language: kotlin

.. .. _kotlin-define-relationship-properties:
.. .. _kotlin-relationships:
.. .. _kotlin-reference-realm-object:

Define a Relationship Property
------------------------------

A relationship is an object property that references another Realm object.
You can define relationships between Realm objects using the following
types:

- ``RealmObject``
- ``RealmList <RealmObject>``
- ``RealmSet <RealmObject>``

Relationships are direct references to other objects in a realm, which
means that you don't need bridge tables or explicit joins to define a
relationship like you would in a relational database. Instead, you can
access related objects by reading and writing to the property that
defines the relationship. Realm executes read operations
lazily, so querying objects with relationship fields doesn't slow
queries.

There are two primary types of relationships between objects:

- To-One Relationship
- To-Many Relationship

.. tip:: One-to vs. Many-to Relationships

   In Realm, there is no way to limit object references from
   other objects within the same realm. As a result, there is no way to
   restrict a relationship to "one to one/one to many" instead of "many to
   one/many to many".

You can also embed one Realm object directly within another to create a nested
data structure using embedded objects. These are similar to relationships but 
have additional constraints. Learn more about using :ref:`Realm objects as properties 
<kotlin-realm-objects-as-properties>`.

.. .. _kotlin-to-one-relationship:

Define a To-One Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A to-one relationship means that an object is related 
to no more than one other object. Setting a relationship field to ``null``
removes the connection between objects, but Realm does not
delete the referenced object.

To define a one-to-one or a many-to-one relationship between objects, 
define an object property whose type is another Realm object in your data model: 

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-to-one-relationship-property.kt
  :language: kotlin
  :emphasize-lines: 6-9

.. .. _kotlin-to-many-relationship:

Define a To-Many Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A to-many relationship means that an object is related in a specific way
to multiple objects. 

To define a to-many relationship between objects, define an object property whose type
is a ``RealmList<E>`` or ``RealmSet<E>``, where ``<E>`` is another Realm object in your data model:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-to-many-relationship-property.kt
  :language: kotlin
  :emphasize-lines: 5-8

RealmLists and RealmSets are containers of RealmObjects, but 
otherwise behave like a regular collection. The same object can 
occur in multiple to-many relationships; the distinction between a 
many-to-many and a one-to-many relationship is up to your application.

.. .. _kotlin-inverse-relationships:

Define an Inverse Relationship 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

An inverse relationship links an object back to any other objects that refer
to it in a defined to-one or to-many relationship. Relationship definitions are
unidirectional, so you must explicitly define a property in the object's model
as an inverse relationship. For example, the to-many relationship 
"User has many Posts" does not automatically create the inverse relationship 
"Post belongs to User". Because relationships are many-to-one or many-to-many, 
following inverse relationships can result in zero, one, or many objects.

Realm automatically updates implicit relationships whenever an
object is added or removed in the specified relationship. You cannot manually
add or remove items from a `backlinks collection
<{+kotlin-local-prefix+}io.realm.kotlin.ext/backlinks.html>`__.

To define an :ref:`inverse relationship <kotlin-inverse-relationships>` between
objects, first define a parent object property whose type is a ``RealmList<T>``, ``RealmSet<T>``, or ``RealmDictionary<T>``, where <E> is another Realm object in your data model:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-inverse-property-parent.kt
  :language: kotlin

Then, provide the backlink to the parent: define a child object with a 
backlink property to the parent object using the ``backlinks()`` method: 

- For ``RealmObject`` child objects, define an immutable backlinks property of ``RealmResults`` list 
  of the parent object type. 
- For ``EmbeddedRealmObject`` child objects, define an immutable backlinks property of the parent object type.

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-inverse-property-children.kt
   :language: kotlin
