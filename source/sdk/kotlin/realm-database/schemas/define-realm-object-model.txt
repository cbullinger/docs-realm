.. _kotlin-define-object-model:
.. _kotlin-model-data:

========================================
Define a Realm Object Model - Kotlin SDK
========================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page describes how to define Realm objects as part of your application's 
data model. To learn more about Realm objects and their properties, 
refer to :ref:`Realm Objects <kotlin-realm-objects-and-relationships>`.
To learn about how to make changes to your Realm objects after
defining your Realm object model, refer to 
:ref:`Change an Object Model <kotlin-change-object-model>`.

The Kotlin SDK memory maps Realm objects directly to native Kotlin 
objects, so there's no need to use a special data access library. 
You define your application's data model via regular Kotlin classes declared
in your application code object. 

.. _kotlin-define-a-new-object-type:

Define a New Object Type
------------------------

To define a new Realm object type, you must create a uniquely named Kotlin 
class that implements either the ``RealmObject`` base class or one of its subclasses: 
``EmbeddedRealmObject`` or ``AsymmetricRealmObject``.

.. include:: /includes/note-class-char-limit.rst

Then, you specify your object's properties, including:

- The :ref:`data types <kotlin-supported-types>`
- Whether they're optional or required
- Any :ref:`property annotations <kotlin-property-annotations>` 
- If there's a :ref:`relationship <kotlin-relationships>` to another Realm object

After you've defined your Realm object model, you can pass the set of object 
classes to the realm's configuration when you :ref:`open a realm 
<kotlin-open-a-realm>`. Then, you can work with those objects in the realm.

.. _kotlin-single-primary-constructor:

.. important:: Realm Requires an Empty Constructor
   
   The Realm Kotlin SDK does *not* support having a single primary constructor.
   The SDK requires an empty constructor to create objects. As a workaround,
   you can do something similar to the following:

   .. code-block:: kotlin
      :copyable: false

      class Person(var name: String, var age: Int): RealmObject {
         constructor(): this("", 0) // Empty constructor required by Realm
      }

Define a Realm Object
~~~~~~~~~~~~~~~~~~~~~

To define a Realm object, create a Kotlin class that implements the `RealmObject 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-realm-object/index.html>`__ 
interface:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-realm-object.kt
  :language: kotlin

You can then :ref:`use the object as a property <kotlin-realm-objects-as-properties>` 
to define relationships with other Realm objects. Refer to the 
:ref:`<kotlin-define-relationship-properties>` section for more information.

.. _kotlin-define-embedded-object:

Define an Embedded Object
~~~~~~~~~~~~~~~~~~~~~~~~~

To define an :ref:`embedded object <kotlin-embedded-objects>`, create a Kotlin 
class that implements the `EmbeddedRealmObject 
<{+kotlin-local-prefix+}io.realm.kotlin.types/-embedded-realm-object/index.html>`__
interface:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-embedded-object.kt 
    :language: kotlin

You must then :ref:`embed the object as a property <kotlin-embedded-objects-as-properties>` 
of another Realm object to define the relationship with the parent object:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.embed-defined-object.kt 
   :language: kotlin

 Refer to the 
:ref:`<kotlin-define-relationship-properties>` section for more information.

Define an Asymmetric Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 1.10.0

To define an :ref:`asymmetric object<kotlin-asymmetric-objects>`, create a 
Kotlin class that implements the `AsymmetricRealmObject 
<{+kotlin-sync-prefix+}io.realm.kotlin.types/-asymmetric-realm-object/index.html>`__
interface:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-asymmetric-model.kt 
    :language: kotlin

You *cannot* use an asymmetric object as a property in another Realm object.

Define Collection Properties
----------------------------

You can define collections of items using 
``RealmList``, ``RealmSet``, and ``RealmDictionary`` types.

.. important:: Initialize Collection Properties
   
   Collection types are non-null. When you define a collection property, 
   you *must* initialize it. 

For more information on the collection types used in the Kotlin SDK, 
refer to :ref:`Collection Types <kotlin-collection-types>`.

Define a RealmList
~~~~~~~~~~~~~~~~~~

To define a property as a :ref:`RealmList <kotlin-realm-list>`, specify its
type within the object schema as ``RealmList<E>`` and initialize the
default value using `realmListOf()
<{+kotlin-local-prefix+}io.realm.kotlin.ext/realm-list-of.html>`__:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-a-realm-list.kt
   :language: kotlin

.. _kotlin-define-realm-set-type:

Define a RealmSet
~~~~~~~~~~~~~~~~~

To define a property as a :ref:`RealmSet <kotlin-realm-set>`, specify its
type within the object schema as ``RealmSet<E>`` and initialize the
default value using `realmSetOf() 
<{+kotlin-local-prefix+}io.realm.kotlin.ext/realm-set-of.html>`__:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-a-realm-set.kt
   :language: kotlin

.. _kotlin-define-realm-dictionary-type:

Define a RealmDictionary/RealmMap
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To define a :ref:`RealmDictionary <kotlin-realm-dictionary>`, specify its 
type within the object schema as a ``RealmDictionary<K, V>`` and initialize the
the default value using `realmDictionaryOf()
<{+kotlin-local-prefix+}io.realm.kotlin.ext/realm-dictionary-of.html>`__:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-realm-dictionary-property.kt
   :language: kotlin

.. include:: /includes/map-key-string-limitations.rst

.. literalinclude:: /examples/generated/kotlin/CreateTest.snippet.percent-encode-disallowed-characters.kt
   :language: kotlin

.. _kotlin-define-relationship-properties:

Define a Relationship Property
------------------------------

You can define relationships between Realm objects in your schema. 
The Realm Kotlin SDK supports to-one relationships, to-many relationships, 
inverse relationships, and embedding objects within other objects. 

You can define relationships between your objects using the following
types:

- ``RealmObject``
- ``RealmList <RealmObject>``
- ``RealmSet <RealmObject>``

For more information, refer to the :ref:`Relationships <kotlin-relationships>` 
page.

kotlin-realm-objects-as-properties

Define a To-One Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To define a one-to-one or a many-to-one relationship between objects, 
define an object property whose type is another Realm object in your data model: 

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-to-one-relationship-property.kt
  :language: kotlin
  :emphasize-lines: 6-9

Define a To-Many Relationship
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To define a to-many relationship between objects, define an object property whose type
is a ``RealmList<T>`` or ``RealmSet<T>``, where <E> is another Realm object in your data model:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-to-many-relationship-property.kt
  :language: kotlin
  :emphasize-lines: 5-8

Define an Inverse Relationship 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To define an :ref:`inverse relationship <kotlin-inverse-relationships>` between
objects, first define a parent object property whose type is a ``RealmList<T>``, ``RealmSet<T>``, or ``RealmDictionary<T>``, where <E> is another Realm object in your data model:

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-inverse-property-parent.kt
  :language: kotlin

Then, define a child object with a backlink property to the parent object using the ``backlinks()`` method: 

- For ``RealmObject`` child objects, define an immutable backlinks property of ``RealmResults`` list 
  of the parent object type. 
- For ``EmbeddedRealmObject`` child objects, define an immutable backlinks property of the parent object type.

.. literalinclude:: /examples/generated/kotlin/Schema.snippet.define-inverse-property-children.kt
   :language: kotlin
